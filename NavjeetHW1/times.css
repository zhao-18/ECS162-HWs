/* 
This is from the Resources - MDN Web Docs on CSS. As for the font it is Chomsky which was made by Franklin Brennan. 
Both links will be posted here for ciatition purposes. 
Link 1 - MDN Web Docs on CSS: https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Text_styling/Web_fonts 
Link 2 - Chomsky font: https://www.fontspace.com/category/new-york-times 
*/

@font-face {
    font-family: 'Chomsky';
    src: url('images/fonts/chomsky-font/misc/Chomsky-399c.woff') format('woff');
}

/* 
This is from the Resources - MDN Web Docs on CSS. In the resources it goes over * and how it affects everything in the files. I ultized this so that I can make sure to have 3 columns show up on the page when >1024px.
Here is the link to that resourse: https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Text_styling/Fundamentals 
*/

*, *::before, *::after {
  box-sizing: border-box;
}

body {
    margin: 0;
    font-family: 'Times New Roman', Times, serif;
}

/*
Everything from page_header down to title was used in my header section. 
This helps show the main logo of the New York Times as well as the current date. 
The date is bolded while the todays_paper is turned gray, which is similar to the figma mockup. 
The title is centered and ultilizes the downloaded font to resemble the New York Times front page perfectly. 
*/

.page_header {
    position: relative;     
    text-align: left;    
    border-bottom: 1px solid #D9D9D9;

}

.head_date_today {
    position: absolute;            
    line-height: 0.5;
    padding: 1rem;
}

.date {
    font-weight: bold;
    font-size: 0.5rem;
  }

.todays_paper {
    font-size: 0.5rem;
    color: gray;
  }

.divider {
    margin: 0;
    border-top: 0.2px solid #D9D9D9;
}

.title {
    margin: 0;
    font-family: 'Chomsky';
    font-size: 2rem; 
    white-space: nowrap; 
    text-align: center;
}

/*
These two classes of main_content and content_title was also used in my main section. Content_title was just used to make the titles of the articles to be the color black and to be centered. 
As if I was to make everything centered in main_content this would affect the paragraph text as well which I did not want. As for main_content, this makes the element/class into a flex container, allowed wrapping of the child elements so that this works with the media queries and different screens.
I made it gray so that it looks more like the figma mockup and added padding so that it is spaced out evenly. 
*/

.content_title {
    text-align: center;
    color: black
}

.main_content {
    display: flex;
    flex-wrap: wrap;
    margin: 0 auto;
    padding: 1rem;
    max-width: 1200px;
    color: gray
}

/*
These two classes of .item_col and .item_col img are both being used in my main section. The item_col creates a divider on the right of the column and on the bottom of the column so that the articles seems spaced out and visually appealing like the New York Times website.
Item_col also includes padding so that the enteries/articles are spaced out as well. As for item_col img, these are just for the images used in the website.  
The images are slightly reduced in width however height is auto calucalted so that it does not seem distorted. Margin is also added to give the images spacing from all four sides. 
*/

.item_col {
    border-right: 1px solid #D9D9D9;
    border-bottom: 1px solid #D9D9D9;
    padding: 1rem;
    flex: 1 1 calc(100% / 3); 

}

.item_col img {
    max-width: 90%;   
    height: auto;      
    display: block;
    margin: 1rem;   
}

/*
This is only used to generate a black bar at the bottom of the screen similar to the new york times. I also implemented this as the figma hw1.mockup had this as well.
*/
footer {
    border-top: 3px solid black;
    padding: 1rem;
    margin-top: 1rem;
}
  

/*
I utilized the media quaries links shown in discussion week 2 to understand how media quaries work for each electornic. 
For example, in the week 2 disucssion slides which is located in files in canvas, it shows that Desktop is >1024px, Tablet is 768px and 1024px, and Mobile is <768px. 
Therefore, in my code there are three breakpoints for each electronic, wich defines three different column layouts for each electronic.
For the mobile, the column will take 100% of the width, basically meaning that it is one column.
For the tablet, the column will be 50% of the width, therefore there will be 2 columns to fit the entire container's width.
For the desktop, the column will be 1/3 % of the width, therefore there will be 3 columns to fit the entire container's width. 
*/

@media (max-width: 767px) {
    .item_col {
        flex: 1 1 100%
    }
}

@media (min-width: 768px) and (max-width: 1024px) {
    .item_col {
        flex: 1 1 50%
    }
}

@media (min-width:1025px) {
    .item_col {
        flex: 1 1 calc(100% / 3);
    }
}